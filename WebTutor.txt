Нюансы работы с WT

// Присвоение полю "current_field", объектa XmElem, примитивного значения
    var card = OpenDoc(UrlFromDocID(1234567890))
    var bind = card.TopElem.binds.AddChild()
    bind.OptChild('current_field').Value = "bla bla bla"

// Запуск агента только на сервере
    if ( !LdsIsServer ) {
        alert('Запуск агента предусмотрен только на стороне сервера.')
    }

// Пропустить итерацию в выгрузке
    continueFlag = true;

// Полезные функции для работы с датой
    StrDate(<date>[,<showTime>[,<showSeconds>]])    // Преобразует дату в строку
    ParseDate(StrDate(Date(), false, false))        // текущая дата без времени
    DateToRawSeconds(<date>)                        // unixtimestamp
    RawSecondsToDate(<seconds>)                     // unixtimestamp

// запись в кастомное поле
    cardPa.TopElem.custom_elems.ObtainChildByKey('notification').value = 'test'

// прочитать из кастомного поля
    var test = cardPa.TopElem.custom_elems.GetOptProperty("start")













//инфа из телеги (как добавить забыкапить объект в пакет кодом)
// добавить в пакет кодом:
tools.add_object_to_package
// параметры:
docObject: карточка объекта, добавляемого в пакет или null (если null, то будет открыта внутри функции через OpenDoc(UrlFromDocID(iObjectID))  )
iObjectID: id добавляемого в пакет объекта
Screen: используется при взаимодействии с окнами интерфейса - в коде можно просто указать Screen или null
fldPackage: папка (схема) для пакетов, как указать свою не совсем понял, чтобы использовать активную сейчас - указываем package_objects.GetChildByKey(local_settings.package_id)
add_files: логическое значение true/false - аналог галочки в Админке: Включать в пакет ресурсы, прикреплённые к объектам? Если не нужны - ставим false, если нужны, то true, НО при true и отсутствии ресурсов для данного типа объектов будет ошибка, если ресурсы к данному типу объектов не прикрепляются в принципе, например, к группам ресурсы не прикрепляются, а к мероприятиям - могут быть прикреплены (определить это можно при попытке добавить карточку данного типа объекта в пакет вручную - если будет строка Включать в пакет ресурсы - то можем ставить true, если ресурсы нам нужны). Если ресурсы нужны, но мы не знаем, предусмотрены ли они для данного типа объектов - можно обернуть в try {} catch(err) {} и попробовать сначала с true, а при ошибке - с false
add_roles: логическое значение true/false - Включать в пакет категории, к которым прикреплён объект? Если не нужны - ставим false, если нужны, то true, НО при true и отсутствии категорий будет ошибка,  если категории к данному типу объектов не предусмотрены в принципе, например, к сотрудникам категории не предусмотрены, а к группам - предусмотрены (определить это можно при попытке добавить карточку данного типа объекта в пакет вручную - если будет строка Включать в пакет категории - то можем ставить true, если категории нам нужны). Если категории нужны, но мы не знаем, предусмотрены ли они для данного типа объектов - можно обернуть в try {} catch(err) {} и попробовать сначала с true, а при ошибке - с false
add_sections: логическое значение true/false. Работает только для Тестов и означает добавление вопросов при true. В других типах объектов ошибки не выдаёт.
add_foreign_elem_objects: логическое значение true/false. Аналог галочки Добавлять связанные объекты - использовать осторожно, так как добавляет в том числе и сотрудника, создавшего/редактирующего карточку. Ошибку не выдаёт.
apply_to_all: логическое значение true/false - в коде ставим true, при false и выполнении на стороне клиента возникает диалоговое окно с запросом опций добавления в пакет
// Пример для сотрудника:
tools.add_object_to_package( null, 1105387902724063510, null, package_objects.GetChildByKey(local_settings.package_id), { 'add_files': false, 'add_roles': false, 'add_sections': false, 'add_foreign_elem_objects': false, 'apply_to_all': true } );
